{"filter":false,"title":"boggle.py","tooltip":"/boggle.py","undoManager":{"mark":55,"position":55,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["i"],"id":1},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["m"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["p"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["o"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["r"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":[" "],"id":2},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["u"]}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["n"],"id":3},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["i"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["t"]},{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":["t"]},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["e"]},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["a"]},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["s"]}],[{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["t"],"id":4}],[{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"remove","lines":["t"],"id":5},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"remove","lines":["s"]},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"remove","lines":["a"]}],[{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["s"],"id":6},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":15},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":["c"],"id":8},{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":["l"]},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"insert","lines":["a"]},{"start":{"row":3,"column":3},"end":{"row":3,"column":4},"action":"insert","lines":["s"]},{"start":{"row":3,"column":4},"end":{"row":3,"column":5},"action":"insert","lines":["s"]}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"insert","lines":[" "],"id":9},{"start":{"row":3,"column":6},"end":{"row":3,"column":7},"action":"insert","lines":["t"]},{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"insert","lines":["e"]},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"insert","lines":["s"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":3,"column":6},"end":{"row":3,"column":10},"action":"remove","lines":["test"],"id":10},{"start":{"row":3,"column":6},"end":{"row":4,"column":25},"action":"insert","lines":["def test_description(self):","    # TODO: write code..."]}],[{"start":{"row":3,"column":15},"end":{"row":3,"column":26},"action":"remove","lines":["description"],"id":11},{"start":{"row":3,"column":14},"end":{"row":3,"column":15},"action":"remove","lines":["_"]}],[{"start":{"row":4,"column":3},"end":{"row":4,"column":25},"action":"remove","lines":[" # TODO: write code..."],"id":12}],[{"start":{"row":3,"column":1},"end":{"row":3,"column":21},"action":"remove","lines":["lass def test(self):"],"id":13},{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"remove","lines":["c"]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":3},"action":"remove","lines":["","   "],"id":14}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":["t"],"id":15},{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":["e"]}],[{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"remove","lines":["e"],"id":16},{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"remove","lines":["t"]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":["c"],"id":17},{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":["l"]},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"insert","lines":["a"]},{"start":{"row":3,"column":3},"end":{"row":3,"column":4},"action":"insert","lines":["s"]},{"start":{"row":3,"column":4},"end":{"row":3,"column":5},"action":"insert","lines":["s"]}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"insert","lines":[" "],"id":18},{"start":{"row":3,"column":6},"end":{"row":3,"column":7},"action":"insert","lines":["t"]},{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"insert","lines":["e"]},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"insert","lines":["s"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["_"],"id":19}],[{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["b"],"id":20},{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"insert","lines":["o"]},{"start":{"row":3,"column":13},"end":{"row":3,"column":14},"action":"insert","lines":["g"]},{"start":{"row":3,"column":14},"end":{"row":3,"column":15},"action":"insert","lines":["g"]}],[{"start":{"row":3,"column":15},"end":{"row":3,"column":16},"action":"insert","lines":["l"],"id":21},{"start":{"row":3,"column":16},"end":{"row":3,"column":17},"action":"insert","lines":["e"]}],[{"start":{"row":3,"column":17},"end":{"row":3,"column":19},"action":"insert","lines":["()"],"id":22}],[{"start":{"row":3,"column":18},"end":{"row":3,"column":19},"action":"insert","lines":["u"],"id":23},{"start":{"row":3,"column":19},"end":{"row":3,"column":20},"action":"insert","lines":["n"]},{"start":{"row":3,"column":20},"end":{"row":3,"column":21},"action":"insert","lines":["i"]},{"start":{"row":3,"column":21},"end":{"row":3,"column":22},"action":"insert","lines":["t"]}],[{"start":{"row":3,"column":22},"end":{"row":3,"column":23},"action":"insert","lines":["t"],"id":24},{"start":{"row":3,"column":23},"end":{"row":3,"column":24},"action":"insert","lines":["e"]},{"start":{"row":3,"column":24},"end":{"row":3,"column":25},"action":"insert","lines":["s"]},{"start":{"row":3,"column":25},"end":{"row":3,"column":26},"action":"insert","lines":["t"]}],[{"start":{"row":3,"column":26},"end":{"row":3,"column":27},"action":"insert","lines":["."],"id":25}],[{"start":{"row":3,"column":27},"end":{"row":3,"column":28},"action":"insert","lines":["T"],"id":26},{"start":{"row":3,"column":28},"end":{"row":3,"column":29},"action":"insert","lines":["e"]}],[{"start":{"row":3,"column":29},"end":{"row":3,"column":30},"action":"insert","lines":["s"],"id":27},{"start":{"row":3,"column":30},"end":{"row":3,"column":31},"action":"insert","lines":["t"]},{"start":{"row":3,"column":31},"end":{"row":3,"column":32},"action":"insert","lines":["C"]}],[{"start":{"row":3,"column":32},"end":{"row":3,"column":33},"action":"insert","lines":["a"],"id":28},{"start":{"row":3,"column":33},"end":{"row":3,"column":34},"action":"insert","lines":["s"]},{"start":{"row":3,"column":34},"end":{"row":3,"column":35},"action":"insert","lines":["e"]}],[{"start":{"row":3,"column":36},"end":{"row":3,"column":37},"action":"insert","lines":[":"],"id":29}],[{"start":{"row":3,"column":37},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":30},{"start":{"row":4,"column":0},"end":{"row":4,"column":4},"action":"insert","lines":["    "]},{"start":{"row":4,"column":4},"end":{"row":4,"column":5},"action":"insert","lines":["d"]},{"start":{"row":4,"column":5},"end":{"row":4,"column":6},"action":"insert","lines":["e"]},{"start":{"row":4,"column":6},"end":{"row":4,"column":7},"action":"insert","lines":["f"]}],[{"start":{"row":4,"column":7},"end":{"row":4,"column":8},"action":"insert","lines":[" "],"id":31},{"start":{"row":4,"column":8},"end":{"row":4,"column":9},"action":"insert","lines":["t"]},{"start":{"row":4,"column":9},"end":{"row":4,"column":10},"action":"insert","lines":["e"]},{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["s"]}],[{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":["t"],"id":32},{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["_"]}],[{"start":{"row":4,"column":13},"end":{"row":4,"column":14},"action":"insert","lines":["i"],"id":33},{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["s"]},{"start":{"row":4,"column":15},"end":{"row":4,"column":16},"action":"insert","lines":["_"]}],[{"start":{"row":4,"column":16},"end":{"row":4,"column":17},"action":"insert","lines":["t"],"id":34},{"start":{"row":4,"column":17},"end":{"row":4,"column":18},"action":"insert","lines":["h"]},{"start":{"row":4,"column":18},"end":{"row":4,"column":19},"action":"insert","lines":["i"]},{"start":{"row":4,"column":19},"end":{"row":4,"column":20},"action":"insert","lines":["s"]},{"start":{"row":4,"column":20},"end":{"row":4,"column":21},"action":"insert","lines":["_"]}],[{"start":{"row":4,"column":21},"end":{"row":4,"column":22},"action":"insert","lines":["t"],"id":35},{"start":{"row":4,"column":22},"end":{"row":4,"column":23},"action":"insert","lines":["h"]},{"start":{"row":4,"column":23},"end":{"row":4,"column":24},"action":"insert","lines":["i"]},{"start":{"row":4,"column":24},"end":{"row":4,"column":25},"action":"insert","lines":["n"]},{"start":{"row":4,"column":25},"end":{"row":4,"column":26},"action":"insert","lines":["g"]}],[{"start":{"row":4,"column":26},"end":{"row":4,"column":27},"action":"insert","lines":["_"],"id":36},{"start":{"row":4,"column":27},"end":{"row":4,"column":28},"action":"insert","lines":["o"]},{"start":{"row":4,"column":28},"end":{"row":4,"column":29},"action":"insert","lines":["n"]}],[{"start":{"row":4,"column":29},"end":{"row":4,"column":31},"action":"insert","lines":["()"],"id":37}],[{"start":{"row":4,"column":30},"end":{"row":4,"column":31},"action":"insert","lines":["s"],"id":38},{"start":{"row":4,"column":31},"end":{"row":4,"column":32},"action":"insert","lines":["e"]},{"start":{"row":4,"column":32},"end":{"row":4,"column":33},"action":"insert","lines":["l"]},{"start":{"row":4,"column":33},"end":{"row":4,"column":34},"action":"insert","lines":["f"]}],[{"start":{"row":4,"column":35},"end":{"row":4,"column":36},"action":"insert","lines":[":"],"id":39}],[{"start":{"row":4,"column":36},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":40},{"start":{"row":5,"column":0},"end":{"row":5,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":5,"column":8},"end":{"row":5,"column":9},"action":"insert","lines":["s"],"id":41},{"start":{"row":5,"column":9},"end":{"row":5,"column":10},"action":"insert","lines":["e"]},{"start":{"row":5,"column":10},"end":{"row":5,"column":11},"action":"insert","lines":["l"]},{"start":{"row":5,"column":11},"end":{"row":5,"column":12},"action":"insert","lines":["f"]}],[{"start":{"row":5,"column":12},"end":{"row":5,"column":13},"action":"insert","lines":["."],"id":42}],[{"start":{"row":5,"column":13},"end":{"row":5,"column":14},"action":"insert","lines":["a"],"id":43},{"start":{"row":5,"column":14},"end":{"row":5,"column":15},"action":"insert","lines":["s"]},{"start":{"row":5,"column":15},"end":{"row":5,"column":16},"action":"insert","lines":["s"]},{"start":{"row":5,"column":16},"end":{"row":5,"column":17},"action":"insert","lines":["e"]},{"start":{"row":5,"column":17},"end":{"row":5,"column":18},"action":"insert","lines":["r"]},{"start":{"row":5,"column":18},"end":{"row":5,"column":19},"action":"insert","lines":["t"]}],[{"start":{"row":5,"column":19},"end":{"row":5,"column":20},"action":"insert","lines":["E"],"id":44},{"start":{"row":5,"column":20},"end":{"row":5,"column":21},"action":"insert","lines":["q"]},{"start":{"row":5,"column":21},"end":{"row":5,"column":22},"action":"insert","lines":["u"]},{"start":{"row":5,"column":22},"end":{"row":5,"column":23},"action":"insert","lines":["a"]},{"start":{"row":5,"column":23},"end":{"row":5,"column":24},"action":"insert","lines":["l"]}],[{"start":{"row":5,"column":13},"end":{"row":5,"column":24},"action":"remove","lines":["assertEqual"],"id":45},{"start":{"row":5,"column":13},"end":{"row":5,"column":26},"action":"insert","lines":["assertEqual()"]}],[{"start":{"row":5,"column":25},"end":{"row":5,"column":26},"action":"insert","lines":["1"],"id":46},{"start":{"row":5,"column":26},"end":{"row":5,"column":27},"action":"insert","lines":[","]}],[{"start":{"row":5,"column":27},"end":{"row":5,"column":28},"action":"insert","lines":[" "],"id":47},{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"insert","lines":["1"]}],[{"start":{"row":0,"column":0},"end":{"row":5,"column":30},"action":"remove","lines":["import unittest","","","class test_boggle(unittest.TestCase):","    def test_is_this_thing_on(self):","        self.assertEqual(1, 1)"],"id":48},{"start":{"row":0,"column":0},"end":{"row":6,"column":32},"action":"insert","lines":["def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): ' ' for row in range(height)","        for col in range(width)}"]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":32},"action":"remove","lines":["def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): ' ' for row in range(height)","        for col in range(width)}"],"id":49},{"start":{"row":0,"column":0},"end":{"row":11,"column":32},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}"]}],[{"start":{"row":0,"column":0},"end":{"row":11,"column":32},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}"],"id":50},{"start":{"row":0,"column":0},"end":{"row":52,"column":21},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"]}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":21},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"],"id":51},{"start":{"row":0,"column":0},"end":{"row":52,"column":21},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"]}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":21},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours"],"id":52},{"start":{"row":0,"column":0},"end":{"row":92,"column":45},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]"]}],[{"start":{"row":0,"column":0},"end":{"row":92,"column":45},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]"],"id":53},{"start":{"row":0,"column":0},"end":{"row":108,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":108,"column":10},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":54},{"start":{"row":0,"column":0},"end":{"row":112,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def word_in_dictionary(word, dict):","    return word in dict","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word_in_dictionary(word, dictionary):","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":112,"column":10},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def word_in_dictionary(word, dict):","    return word in dict","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word_in_dictionary(word, dictionary):","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":55},{"start":{"row":0,"column":0},"end":{"row":112,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def word_in_dictionary(word, dict):","    return word in dict","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word_in_dictionary(word, dictionary):","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return {w.strip().upper() for w in f}","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(4, 4)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":112,"column":10},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def word_in_dictionary(word, dict):","    return word in dict","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word_in_dictionary(word, dictionary):","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return {w.strip().upper() for w in f}","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(4, 4)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":56},{"start":{"row":0,"column":0},"end":{"row":119,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","    full_words, stems = dictionary","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in full_words:","            paths.append(path)","        if word not in stems:","            return","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    full_words, stems = set(), set()","    with open(dictionary_file) as f:","        for word in f:","            word = word.strip().upper()","            full_words.add(word)","","            for i in range(1, len(word)):","                stems.add(word[:i])","","        return full_words, stems","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(4, 4)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}]]},"ace":{"folds":[],"scrolltop":1066,"scrollleft":0,"selection":{"start":{"row":119,"column":10},"end":{"row":119,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":75,"state":"start","mode":"ace/mode/python"}},"timestamp":1563314302227,"hash":"f4b68c6a863f255b4c84dc7e18306fc3c96a1d15"}